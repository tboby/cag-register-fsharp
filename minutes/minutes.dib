#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: PdfPig"
#r "nuget: sqlite-net-pcl"
#r "nuget: Microsoft.Data.Sqlite"

using UglyToad.PdfPig;
using System.Text.RegularExpressions;
using SQLite;
using System.Security.Cryptography;
using System.IO;
using System.Net.Http;
using Microsoft.Data.Sqlite;
using System.Threading;

// Database models
[Table("minutes")]
public class MinuteRecord
{
    [PrimaryKey, AutoIncrement]
    public int Id { get; set; }
    public int YearId { get; set; }
    public string Title { get; set; }
    public string Url { get; set; }
    public DateTime CreatedAt { get; set; }
}

[Table("ProcessedPdfs")]
public class ProcessedPdf
{
    [PrimaryKey]
    public string Url { get; set; }
    public string FileHash { get; set; }
    public DateTime ProcessedDate { get; set; }
}

[Table("CagReferences")]
public class CagReference
{
    [PrimaryKey, AutoIncrement]
    public int Id { get; set; }
    [Indexed]
    public string PdfUrl { get; set; }
    [Indexed]
    public string CagId { get; set; }
    public string PageRanges { get; set; }
    public DateTime ProcessedDate { get; set; }
}

public class PdfProcessor
{
    private readonly SQLiteConnection _db;
    private readonly HttpClient _client;
    private readonly string _downloadDir;
    private readonly SemaphoreSlim _downloadThrottle = new SemaphoreSlim(3); // Max 3 concurrent downloads
    private readonly SemaphoreSlim _dbLock = new SemaphoreSlim(1); // Lock for database access

    public PdfProcessor(string dbPath, string downloadDir)
    {
        _db = new SQLiteConnection(dbPath);
        _client = new HttpClient();
        _downloadDir = downloadDir;
        InitializeDatabase();
    }

    private void InitializeDatabase()
    {
        _db.CreateTable<ProcessedPdf>();
        _db.CreateTable<CagReference>();
    }

    private string CalculateFileHash(string filePath)
    {
        using var sha256 = SHA256.Create();
        using var stream = File.OpenRead(filePath);
        var hash = sha256.ComputeHash(stream);
        return Convert.ToBase64String(hash);
    }

    private bool IsFileProcessed(string url, string currentHash)
    {
        var existingFile = _db.Table<ProcessedPdf>()
            .FirstOrDefault(f => f.Url == url);
        return existingFile?.FileHash == currentHash;
    }

    private List<string> GetPageRanges(HashSet<int> pages)
    {
        var ranges = new List<string>();
        var orderedPages = pages.OrderBy(p => p).ToList();

        int start = orderedPages[0];
        int prev = start;

        for (int i = 1; i <= orderedPages.Count; i++)
        {
            if (i == orderedPages.Count || orderedPages[i] != prev + 1)
            {
                ranges.Add(start == prev ? $"p{start}" : $"p{start}-p{prev}");
                if (i < orderedPages.Count)
                {
                    start = orderedPages[i];
                    prev = start;
                }
            }
            else
            {
                prev = orderedPages[i];
            }
        }

        return ranges;
    }

    private async Task<(string FilePath, string Hash)?> DownloadAndHashPdf(string url, string title)
    {
        try
        {
            await _downloadThrottle.WaitAsync();
            var fileName = Path.GetFileName(new Uri(url).LocalPath);
            var filePath = Path.Combine(_downloadDir, fileName);

            if (!File.Exists(filePath))
            {
                Console.WriteLine($"Downloading: {title}");
                var pdfBytes = await _client.GetByteArrayAsync(url);
                await File.WriteAllBytesAsync(filePath, pdfBytes);
            }

            var hash = CalculateFileHash(filePath);
            return (filePath, hash);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading {title}: {ex.Message}");
            return null;
        }
        finally
        {
            _downloadThrottle.Release();
        }
    }

    private Dictionary<string, HashSet<int>> ProcessPdfFile(string filePath)
    {
        var idLocations = new Dictionary<string, HashSet<int>>();
        var pattern = @"\d{2}/CAG/\d{4}";

        using var document = PdfDocument.Open(filePath);
        foreach (var page in document.GetPages())
        {
            var pageNumber = page.Number;
            var matches = Regex.Matches(page.Text, pattern);

            foreach (Match match in matches)
            {
                var id = match.Value;
                if (!idLocations.ContainsKey(id))
                {
                    idLocations[id] = new HashSet<int>();
                }
                idLocations[id].Add(pageNumber);
            }
        }

        return idLocations;
    }

    private async Task ProcessPdfEntry(string url, string title)
    {
        try
        {
            // Check if already processed
            await _dbLock.WaitAsync();
            var processed = _db.Table<ProcessedPdf>()
                .FirstOrDefault(p => p.Url == url);
            _dbLock.Release();

            if (processed != null)
            {
                Console.WriteLine($"Already processed: {title}");
                return;
            }

            // Download and hash the PDF
            var result = await DownloadAndHashPdf(url, title);
            if (result == null) return;

            var (filePath, hash) = result.Value;

            // Process the PDF for CAG references
            var idLocations = ProcessPdfFile(filePath);

            // Save results to database
            await _dbLock.WaitAsync();
            try
            {
                _db.RunInTransaction(() =>
                {
                    // Update processed file record
                    _db.InsertOrReplace(new ProcessedPdf
                    {
                        Url = url,
                        FileHash = hash,
                        ProcessedDate = DateTime.UtcNow
                    });

                    // Remove existing CAG ID locations for this file
                    _db.Execute("DELETE FROM CagReferences WHERE PdfUrl = ?", url);

                    // Insert new locations
                    foreach (var entry in idLocations)
                    {
                        var pageRanges = string.Join(", ", GetPageRanges(entry.Value));
                        _db.Insert(new CagReference
                        {
                            PdfUrl = url,
                            CagId = entry.Key,
                            PageRanges = pageRanges,
                            ProcessedDate = DateTime.UtcNow
                        });
                    }
                });
            }
            finally
            {
                _dbLock.Release();
            }

            Console.WriteLine($"Found {idLocations.Count} CAG references in {title}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing {title}: {ex.Message}");
        }
    }

    public async Task ProcessMinutes()
    {
        // Create download directory if it doesn't exist
        Directory.CreateDirectory(_downloadDir);

        // Get all PDF minutes from the database
        using var minutesDb = new SqliteConnection("Data Source=minutes.db");
        minutesDb.Open();

        var command = minutesDb.CreateCommand();
        command.CommandText = @"
            SELECT m.url, m.title
            FROM minutes m
            WHERE m.url LIKE '%.pdf'";

        var pdfsToProcess = new List<(string Url, string Title)>();
        using (var reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                pdfsToProcess.Add((
                    reader.GetString(0), // url
                    reader.GetString(1)  // title
                ));
            }
        }

        // Process PDFs in parallel with throttling
        var tasks = pdfsToProcess.Select(pdf =>
            ProcessPdfEntry(pdf.Url, pdf.Title)
        );

        await Task.WhenAll(tasks);
    }

    public void DisplayResults()
    {
        try
        {
            var results = _db.Table<CagReference>()
                .OrderBy(r => r.CagId)
                .ToList()
                .GroupBy(r => r.CagId);

            Console.WriteLine("\nCAG Application IDs found across all files:");
            Console.WriteLine("==========================================");

            foreach (var group in results)
            {
                Console.WriteLine($"\n{group.Key}:");  // group.Key is the CagId
                foreach (var reference in group)
                {
                    Console.WriteLine($"  {Path.GetFileName(reference.PdfUrl)}: {reference.PageRanges}");
                }
            }

            // Print summary
            Console.WriteLine("\nSummary:");
            Console.WriteLine("========");
            Console.WriteLine($"Total unique CAG IDs found: {results.Count()}");
            Console.WriteLine($"Total references found: {results.Sum(g => g.Count())}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error displaying results: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _db?.Dispose();
        _client?.Dispose();
        _downloadThrottle?.Dispose();
        _dbLock?.Dispose();
    }
}

#!csharp

// Initialize and process
var processor = new PdfProcessor(
    dbPath: "cag_references.db",
    downloadDir: "downloaded_pdfs"
);

// Process all PDFs from the minutes database
await processor.ProcessMinutes();

// Display results
processor.DisplayResults();
